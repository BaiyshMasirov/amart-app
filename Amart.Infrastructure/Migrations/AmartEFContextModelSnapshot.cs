// <auto-generated />
using System;
using Amart.Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Amart.Infrastructure.Migrations
{
    [DbContext(typeof(AmartEFContext))]
    partial class AmartEFContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Amart.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Amart.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b7bb906-4d07-4e3b-9590-a08341e3e34b"),
                            Created = new DateTime(2022, 4, 9, 13, 13, 1, 164, DateTimeKind.Local).AddTicks(9480),
                            Name = "IPhone 13S",
                            Price = 250m,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8dbacb5f-371d-4d35-bd41-65967bce80ce"),
                            Created = new DateTime(2022, 4, 9, 13, 13, 1, 165, DateTimeKind.Local).AddTicks(321),
                            Name = "Acer Aspire",
                            Price = 1250m,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5c5ffe31-0b04-4ed1-8ca6-b059e5157ba3"),
                            Created = new DateTime(2022, 4, 9, 13, 13, 1, 165, DateTimeKind.Local).AddTicks(330),
                            Name = "Samsung S20",
                            Price = 1600m,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1cc3694a-8686-47db-95c1-f25a93583daf"),
                            Created = new DateTime(2022, 4, 9, 13, 13, 1, 165, DateTimeKind.Local).AddTicks(333),
                            Name = "Coca cola",
                            Price = 250m,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("31d14f0c-4d4b-4e78-acb0-f750eb4a5321"),
                            Created = new DateTime(2022, 4, 9, 13, 13, 1, 165, DateTimeKind.Local).AddTicks(336),
                            Name = "Ball",
                            Price = 20m,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d9f09c1b-9cc2-4e90-9c6a-0be8edda9015"),
                            Created = new DateTime(2022, 4, 9, 13, 13, 1, 165, DateTimeKind.Local).AddTicks(339),
                            Name = "Monitor",
                            Price = 630m,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3deafeda-f483-47f1-8b4d-18f97c30d07d"),
                            Created = new DateTime(2022, 4, 9, 13, 13, 1, 165, DateTimeKind.Local).AddTicks(342),
                            Name = "Book",
                            Price = 450m,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Amart.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7158e4d-a47c-41c8-8a94-48992d11da07"),
                            Created = new DateTime(2022, 4, 9, 13, 13, 1, 162, DateTimeKind.Local).AddTicks(1928),
                            Login = "Admin",
                            Password = "12345678",
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Amart.Domain.Entities.Order", b =>
                {
                    b.HasOne("Amart.Domain.Entities.User", null)
                        .WithMany("Orders")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Amart.Domain.Entities.Product", b =>
                {
                    b.HasOne("Amart.Domain.Entities.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Amart.Domain.Entities.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Amart.Domain.Entities.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
